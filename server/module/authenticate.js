import jwt from 'jsonwebtoken';
import User from './User';
import util from './utils';


/**
 * Create a token from a users Id
 * 
 * @param {request} id - The users id which this token will be vaoid for
 * @returns {Promise}
 */
const SECRET = process.env.SECRET || 'topdog';

async function issueAccessToken(id) {
 const isAdmin = await User.is_admin(id)
 const payload = {
  id: id,
  is_admin: isAdmin,
  email: User.exists(id)
 }

 const token = jwt.sign(payload, SECRET);
 return Promise.resolve(token);
}

/**
 * Authenticate a token that was generated by id
 * 
 * @param {response} res - Request object
 *  @param {response} resp - Request object
 * @param {request} cb - Callback function which the verified token will be passed to
 * @returns {void}
 */
function verifyAccessToken(req, resp, cb) {
 const token = req.headers['x-access-token'] || "error";
 jwt.verify(token, SECRET, function (err, userToken) {
  if (err) {
   resp.json(util.response("error", "Access denied", 0))
  } else {
   cb(userToken);
  }
 });

}

export {
 verifyAccessToken,
 issueAccessToken
}