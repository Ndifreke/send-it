import jwt from 'jsonwebtoken';
import user from './User';
import util from './utils';
import User from './User';


/**
 * Create a token from a users Id
 * 
 * @param {request} id - The users id which this token will be vaoid for
 * @returns {Promise}
 */
const SECRET = process.env.SECRET || 'topdog';

async function issueAccessToken(id) {
  console.log(id)
  const user = await User.lookup(id);
  const payload = {
    id: id,
    is_admin: user.getIsAdmin(),
    email: user.getEmail()
  }

  const token = jwt.sign(payload, SECRET);
  return Promise.resolve(token);
}

/**
 * Authenticate a token that was generated by id
 * 
 * @param {response} res - Request object
 *  @param {response} resp - Request object
 * @param {request} callback - Callback function which the verified token will be passed to
 * @returns {void}
 */
function verifyAccessToken(req, resp, callback, token) {
  if (!token)
    token = req.headers['authorization'];
  jwt.verify(token, SECRET, function (err, userToken) {
    if (err) {
      resp.statusCode = 403;
      resp.json(util.response("error", "Access denied", 0))
    } else if (callback) {
      callback(userToken);
    }
  });
}

function authToken(req, resp, next) {
  async function callback(token) {
    const user = await User.lookup(token.id);
    if (!user) {
      resp.statusCode = 403;
      resp.json({
        status: "error",
        message: "User does not exist"
      });
    } else {
      resp.json({
        status: 'ok',
        message: 'valid token',
        isAdmin: user.getIsAdmin()
      })
    }
  }
  verifyAccessToken(req, resp, callback)
}

function cors(req, res, next) {
  //preflight sniffing
  if (req.method.search(/^options$/gi) != -1) {
    res.setHeader("Access-Control-Allow-Origin", req.headers['origin'] || "*");
    res.setHeader('Access-Control-Allow-Methods', 'POST,GET,,PUT');
    res.setHeader("Access-Control-Allow-Credentials", true);
    res.setHeader("Access-Control-Allow-Headers", 'authorization')
    res.statusCode = 200;
    res.end();
  } else {
    res.setHeader("Access-Control-Allow-Origin", req.headers['origin'] || "*");
    res.setHeader("Access-Control-Allow-Credentials", true);
    next();
  }
}

export {
  verifyAccessToken,
  issueAccessToken,
  cors,
  authToken
}