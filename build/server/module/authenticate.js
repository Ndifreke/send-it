'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.issueAccessToken = exports.verifyAccessToken = undefined;

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _User = require('./User');

var _User2 = _interopRequireDefault(_User);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a token from a users Id
 * 
 * @param {request} id - The users id which this token will be vaoid for
 * @returns {Promise}
 */
var SECRET = process.env.SECRET || 'topdog';

async function issueAccessToken(id) {
  var isAdmin = await _User2.default.is_admin(id);
  var payload = {
    id: id,
    is_admin: isAdmin,
    email: _User2.default.exists(id)
  };

  var token = _jsonwebtoken2.default.sign(payload, SECRET);
  return Promise.resolve(token);
}

/**
 * Authenticate a token that was generated by id
 * 
 * @param {response} res - Request object
 *  @param {response} resp - Request object
 * @param {request} cb - Callback function which the verified token will be passed to
 * @returns {void}
 */
function verifyAccessToken(req, resp, cb) {
  var token = req.headers['x-access-token'] || "error";
  _jsonwebtoken2.default.verify(token, SECRET, function (err, userToken) {
    if (err) {
      resp.json(_utils2.default.response("error", "Access denied", 0));
    } else {
      cb(userToken);
    }
  });
}

exports.verifyAccessToken = verifyAccessToken;
exports.issueAccessToken = issueAccessToken;